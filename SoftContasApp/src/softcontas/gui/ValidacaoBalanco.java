/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package softcontas.gui;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import softcontasapp.Ativo;
import softcontasapp.Contas;
import softcontasapp.ContasDao;
import softcontasapp.ListaContas;
import softcontasapp.ListaContasAtivo;
import softcontasapp.ListaContasPL;
import softcontasapp.ListaContasPassivo;
import softcontasapp.ListaContasResultado;
import softcontasapp.ListaNomeAtivo;
import softcontasapp.ListaNomeContas;
import softcontasapp.ListaNomePL;
import softcontasapp.ListaNomePassivo;
import softcontasapp.ListaNomeResultado;
import softcontasapp.PL;
import softcontasapp.Passivo;
import softcontasapp.Resultado;

/**
 *
 * @author LUCAS MEIRELLES
 */
public class ValidacaoBalanco extends javax.swing.JFrame {

    /**
     * Creates new form ValidacaoBalanco
     */
    public ValidacaoBalanco() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnVoltar = new javax.swing.JButton();
        btnValidarB = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblContas = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        lblRCredito = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblRDebito = new javax.swing.JLabel();
        btnCarregar = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        btnValidaContas = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Conjunto de Contas");

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnValidarB.setText("Validar Balanço");
        btnValidarB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidarBActionPerformed(evt);
            }
        });

        tblContas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblContas);

        jLabel2.setText("Contas de Crédito:");

        jLabel3.setText("Contas de Débito:");

        btnCarregar.setText("Carregar");
        btnCarregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarregarActionPerformed(evt);
            }
        });

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnValidaContas.setText("Validar Contas");
        btnValidaContas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidaContasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblRCredito))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblRDebito)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnValidarB)
                        .addGap(18, 18, 18)
                        .addComponent(btnValidaContas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSalvar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCarregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnVoltar)
                        .addGap(26, 26, 26))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblRCredito))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblRDebito))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVoltar)
                    .addComponent(btnValidarB)
                    .addComponent(btnCarregar)
                    .addComponent(btnSalvar)
                    .addComponent(btnValidaContas))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnValidarBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidarBActionPerformed
        double soma_D = 0;
        double soma_C = 0;
        for(Contas c: listaConta){
            if(c.getNatureza().equals("D")){
                soma_D += c.getSaldo();
            }
            
            else if(c.getNatureza().equals("C")){
                soma_C += c.getSaldo();
            }
        }
        
        lblRCredito.setText(String.valueOf(soma_C));
        
        lblRDebito.setText(String.valueOf(soma_D));
        
        if(soma_D != soma_C){
            JOptionPane.showMessageDialog(rootPane, "Os valores de crédito e débito diferentes. \n" +
"Observe se os valores foram inseridos corretamente!", "Aviso!", HEIGHT);
        
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "O balanço patrimonial está correto.");
        }

    }//GEN-LAST:event_btnValidarBActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        
        dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnCarregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarregarActionPerformed
        ler();
    }//GEN-LAST:event_btnCarregarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        String[] opcao = {"Sim", "Não"};
            
            int salvar = JOptionPane.showOptionDialog(rootPane, "Deseja salvar os registros em um arquivo csv?", "Salvar Arquivos", 
                    JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, opcao, opcao[0]);
            
            if(salvar == 0){
                Registrar();
            
            }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnValidaContasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidaContasActionPerformed
        String resposta = "";
        ContasDao dao = new ContasDao();
        dao.conectar();
        dao.listar();
        dao.listarResultado();
        dao.listarAtivo();
        dao.listarPassivo();
        dao.listarPL();
        
        for(Contas c: ListaContas.Listar()){
            
            
            if(c.getTipo().equals("Ativo")){
                resposta = resposta + comparaContasAtivo2(c);
            }
            
            else if(c.getTipo().equals("Passivo")){
                resposta = resposta + comparaContasPassivo2(c);
            }
            
            else if(c.getTipo().equals("PL")){
                resposta = resposta + comparaContasPL2(c);
            }
            
            else if(c.getTipo().equals("Resultado")){
                resposta = resposta + comparaContasResultado2(c);
            }
            
        }
        if(resposta.equals("")){
                resposta = "Todas as contas foram registradas corretamente!";
            }
        JOptionPane.showMessageDialog(rootPane, resposta);
        dao.desconectar();
    }//GEN-LAST:event_btnValidaContasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ValidacaoBalanco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ValidacaoBalanco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ValidacaoBalanco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ValidacaoBalanco.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ValidacaoBalanco().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCarregar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnValidaContas;
    private javax.swing.JButton btnValidarB;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblRCredito;
    private javax.swing.JLabel lblRDebito;
    private javax.swing.JTable tblContas;
    // End of variables declaration//GEN-END:variables


    
    private ConjuntoContas tela;
    
    private final String[] colunas = {"Tipo", "Nome", "Natureza", "Saldo", "Grupo", "Subgrupo"};
    
    DefaultTableModel tabelaModelo = new DefaultTableModel(colunas, 0);
    
    private List<Contas> listaConta = ListaContas.Listar();
    
    private String path1;
    
    public void setPath(String url){
        this.path1 = url;
    }
    
    private void atualizar(){
        
        if(!listaConta.isEmpty()){
            
            Contas conta;
            
            tabelaModelo = new DefaultTableModel(colunas, 0);
            
            for(int i = 0; i < listaConta.size(); i++){
                
                conta = listaConta.get(i);
                
                String[] linha = {conta.getTipo(), conta.getNome(), conta.getNatureza(), String.valueOf(conta.getSaldo()), 
                    conta.getGrupo(), conta.getSubgrupo()};
                
                tabelaModelo.addRow(linha);
                
            }
        
            tblContas.setModel(tabelaModelo);
        }
        else{
            tabelaModelo = new DefaultTableModel(colunas, 0);
            tblContas.setModel(tabelaModelo);
        }
        
    }
    
   
    
    public void mostraTela(ConjuntoContas tela){
        this.tela = tela;
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        this.atualizar();
        this.setVisible(true);
    }

    
    public JFileChooser path(){
        JOptionPane.showMessageDialog(rootPane, "Escolha uma pasta para criar ou escolher o arquivo para realizar a inserção e leitura de dados!");
        JFileChooser j = new JFileChooser("C:");
        int r = j.showOpenDialog(null);
        if(r == JFileChooser.APPROVE_OPTION){
            return j;
        }
        else{
            System.exit(0);
        }
        return j;
    }
    
    public JFileChooser path2(){
        JOptionPane.showMessageDialog(rootPane, "Escolha um arquivo para realizar a leitura!");
        JFileChooser j = new JFileChooser("C:");
        int r = j.showOpenDialog(null);
        if(r == JFileChooser.APPROVE_OPTION){
            return j;
        }
        else{
            System.exit(0);
        }
        return j;
    }
    
    
    
    public void Registrar(){
        String path = path().getSelectedFile().getAbsolutePath();
    
        File obj = new File(path);
        
        List<Contas> listaC = ListaContas.Listar();
        
        FileWriter csvWriter;
        
        try{
            
            
                obj.createNewFile();
                csvWriter = new FileWriter(obj);
                csvWriter.append("Tipo");
                csvWriter.append(";");
                csvWriter.append("Nome");
                csvWriter.append(";");
                csvWriter.append("Saldo");
                csvWriter.append(";");
                csvWriter.append("Natureza");
                csvWriter.append(";");
                csvWriter.append("Grupo");
                csvWriter.append(";");
                csvWriter.append("Subgrupo");
                csvWriter.append("\n");
            
            List<List<String>> rows = null;
           
            for(int i = 0; i < listaC.size(); i++){
                
                rows = Arrays.asList(
                        Arrays.asList(listaC.get(i).getTipo(), listaC.get(i).getNome(), String.valueOf(listaC.get(i).getSaldo()), listaC.get(i).getNatureza(), 
                        listaC.get(i).getGrupo(), listaC.get(i).getSubgrupo())
                );
                
                for (List<String> rowData : rows) {
                  csvWriter.append(String.join(";", rowData));
                  csvWriter.append("\n");
                }
            }
            
            
            
            csvWriter.flush();
            csvWriter.close();
            
            
            
            
            csvWriter.flush();
            csvWriter.close();
        }
        catch(IOException e){
            
        }
    }
    
    
       
    
    
        public void ler(){
        tabelaModelo = new DefaultTableModel(colunas, 0);
        
        String path = path2().getSelectedFile().getAbsolutePath();
    
        File obj = new File(path);
        
        if(!listaConta.isEmpty()){
            listaConta.clear();
            ListaContas.limpar();
            
            
        }
        try {
                  //criando uma lista para armazenar os dados
                  List<List<String>> data = new ArrayList<>();

                  //caminho de arquivo
                  String file = path;
                  FileReader fr = new FileReader(file);
                  BufferedReader br = new BufferedReader(fr);

                  //lendo linha a linha 
                  String line = br.readLine();
                  while (line != null) {
                      //separando as informações através do metodo split dos dados 
                      //delimitados em ponto e virgula
                      List<String> lineData = Arrays.asList(line.split(";"));
                      data.add(lineData);
                      line = br.readLine();
                  }
                    
                  //imprimindo os dados buscados
                  for (int j = 0; j < data.size(); j++) {
                      if(j == 0){
                          continue;
                      }
                      else{
                            List<String> list = data.get(j);

                            for (int i = 0; i < list.size(); i = i + 6) {

                                String[] linha = {list.get(i), list.get(i+1), list.get(i+2), list.get(i+3), list.get(i+4), list.get(i+5)};
                                if(list.get(i).equals("Ativo")){
                                    Contas c = new Ativo(list.get(i+1), Double.parseDouble(list.get(i+2)), list.get(i+3), list.get(i+4), list.get(i+5));
                                    ListaContas.Adicionar(c);
                                }
                                else if(list.get(i).equals("Passivo")){
                                    Contas c = new Passivo(list.get(i+1), Double.parseDouble(list.get(i+2)), list.get(i+3), list.get(i+4));
                                    ListaContas.Adicionar(c);
                                }
                                else if(list.get(i).equals("PL")){
                                    Contas c = new PL(list.get(i+1), Double.parseDouble(list.get(i+2)), list.get(i+3), list.get(i+4));
                                    ListaContas.Adicionar(c);
                                }
                                else if(list.get(i).equals("Ativo")){
                                    Contas c = new Resultado(list.get(i+1), Double.parseDouble(list.get(i+2)), list.get(i+3), list.get(i+4));
                                    ListaContas.Adicionar(c);
                                }
                                
                              tabelaModelo.addRow(linha);
                            }
                            tblContas.setModel(tabelaModelo);
                        }
                  }
                  //fechando o arquivo
                  br.close();
              } catch (Exception e) {
                  
              }
        
        
    
    }
        
    public String comparaContasAtivo2(Contas conta){
       
        if(ListaNomeContas.Listar().contains(conta.getNome().toUpperCase())){
            if(ListaNomeAtivo.Listar().contains(conta.getNome().toUpperCase())){
                String comparaNatureza;
                String comparaGrupo;
                String comparaSubgrupo;
                    

                for(Contas c: ListaContasAtivo.Listar()){
                    comparaNatureza = c.getNatureza();
                    comparaGrupo = c.getGrupo();
                    comparaSubgrupo = c.getSubgrupo();
                    
                    if(conta.getNome().toUpperCase().equals(c.getNome())){
                        if(conta.getNatureza().equals(comparaNatureza) && conta.getGrupo().toLowerCase().equals(comparaGrupo) && !conta.getSubgrupo().equals(comparaSubgrupo)){
                            return "O subgrupo da conta "+conta.getNome()+" está incorreto! O correto é "+comparaSubgrupo+"!\n";
                        }

                        else if(conta.getNatureza().equals(comparaNatureza) && !conta.getGrupo().toLowerCase().equals(comparaGrupo) && conta.getSubgrupo().equals(comparaSubgrupo)){
                            return "Grupo da conta "+conta.getNome()+" está incorreto! O correto é "+comparaGrupo+"!\n";
                        }

                        else if(conta.getNatureza().equals(comparaNatureza) && !conta.getGrupo().toLowerCase().equals(comparaGrupo) && !conta.getSubgrupo().equals(comparaSubgrupo)){
                            return "Grupo e subgrupo da conta "+conta.getNome()+" estão incorretos! O grupo correto é "+comparaGrupo+" e o subgrupo é "+comparaSubgrupo+"!\n";
                        }

                        else if(!conta.getNatureza().equals(comparaNatureza) && conta.getGrupo().toLowerCase().equals(comparaGrupo) && !conta.getSubgrupo().equals(comparaSubgrupo)){
                            return "Natureza e subgrupo da conta "+conta.getNome()+" estão incorretos! O grupo correto é "+comparaGrupo+" e o subgrupo é "+comparaSubgrupo+"!\n";
                        }

                        else if(!conta.getNatureza().equals(comparaNatureza) && conta.getGrupo().toLowerCase().equals(comparaGrupo) && conta.getSubgrupo().equals(comparaSubgrupo)){
                            return "Natureza da conta "+conta.getNome()+" está incorreta! O correto é "+comparaNatureza+"!\n";
                        }

                        else if(!conta.getNatureza().equals(comparaNatureza) && !conta.getGrupo().toLowerCase().equals(comparaGrupo) && conta.getSubgrupo().equals(comparaSubgrupo)){
                            return "Natureza e grupo da conta "+conta.getNome()+" estão incorretos! O correto é "+comparaNatureza+", "+comparaGrupo+"!\n";
                        }

                        else if(!conta.getNatureza().equals(comparaNatureza) && !conta.getGrupo().toLowerCase().equals(comparaGrupo) && !conta.getSubgrupo().equals(comparaSubgrupo)){
                            return "A natureza, o grupo, e o subgrupo da conta "+conta.getNome()+" estão incorretos! O corretos são "+comparaNatureza+", "+comparaGrupo+", "+comparaSubgrupo+"!\n";
                        }
                    }
                }

            }
        
            else{
                return "Essa conta("+conta.getNome()+") não é uma conta de ativo!\n";
            }
            
        }
        
        else{
            return "A conta "+conta.getNome()+" não está registrada no plano de contas!\n";
             
        }
        return "";
    }
    
    
    public String comparaContasPassivo2(Contas conta){
       
        if(ListaNomeContas.Listar().contains(conta.getNome().toUpperCase())){
            if(ListaNomePassivo.Listar().contains(conta.getNome().toUpperCase())){
                String comparaNatureza;
                String comparaGrupo;
                for(Contas c:ListaContasPassivo.Listar()){
                    comparaNatureza = c.getNatureza();
                    comparaGrupo = c.getGrupo();
                    
                    

                   
                    if(conta.getNome().toUpperCase().equals(c.getNome())){
                        if(conta.getNatureza().equals(comparaNatureza) && !conta.getGrupo().toLowerCase().equals(comparaGrupo)){

                            return "Grupo da conta "+conta.getNome()+" está incorreto! O correto é "+comparaGrupo+"!\n";
                        }

                        else if(!conta.getNatureza().equals(comparaNatureza) && conta.getGrupo().toLowerCase().equals(comparaGrupo)){
                            return "Natureza da conta "+conta.getNome()+" está incorreta! O correto é "+comparaNatureza+"!\n";
                        }

                        else if(!conta.getNatureza().equals(comparaNatureza) && !conta.getGrupo().toLowerCase().equals(comparaGrupo)){
                            return "Você registrou a conta "+conta.getNome()+" incorretamente! O correto é "+comparaNatureza+", "+comparaGrupo+"!\n";
                        }
                                        
                    }
                }
                
            }
            else{
                return "Essa conta("+conta.getNome()+") não é uma conta de passivo!";
            }
        }
        
        else{
            return "A conta("+conta.getNome()+") não está registrada no plano de contas!";
        }
        return "";
    }
    
    
    
    public String comparaContasPL2(Contas conta){
        
        if(ListaNomeContas.Listar().contains(conta.getNome().toUpperCase())){
            if(ListaNomePL.Listar().contains(conta.getNome().toUpperCase())){
                String comparaNatureza;
                String comparaGrupo;
                for(Contas c:ListaContasPL.Listar()){
                    
                    comparaNatureza = c.getNatureza();
                    comparaGrupo = c.getGrupo();
                    
                    

                   
                    if(conta.getNome().toUpperCase().equals(c.getNome())){
                        if(conta.getNatureza().equals(comparaNatureza) && !conta.getGrupo().toLowerCase().equals(comparaGrupo)){

                            return "Grupo da conta "+conta.getNome()+" está incorreto! O correto é "+comparaGrupo+"!\n";
                        }

                        else if(!conta.getNatureza().equals(comparaNatureza) && conta.getGrupo().toLowerCase().equals(comparaGrupo)){
                            return "Natureza da conta "+conta.getNome()+" está incorreta! O correto é "+comparaNatureza+"!\n";
                        }

                        else if(!conta.getNatureza().equals(comparaNatureza) && !conta.getGrupo().toLowerCase().equals(comparaGrupo)){
                            return "Você registrou a conta "+conta.getNome()+" incorretamente! O correto é "+comparaNatureza+", "+comparaGrupo+"!\n";
                        }
                                        
                    } 
                }
                
            }
            else{
                return "Essa conta("+conta.getNome()+") não é uma conta de PL!\n";
            }
        }
        
        else{
            return "A conta("+conta.getNome()+") não está registrada no plano de contas!\n";
        }
        return "";
    }
    
    
    
    
    public String comparaContasResultado2(Contas conta){
        
        if(ListaNomeContas.Listar().contains(conta.getNome().toUpperCase())){
            if(ListaNomeResultado.Listar().contains(conta.getNome().toUpperCase())){
                String comparaNatureza;
                String comparaGrupo;
                for(Contas c:ListaContasResultado.Listar()){
                    comparaNatureza = c.getNatureza();
                    comparaGrupo = c.getGrupo();
                    
                    

                   
                    if(conta.getNome().toUpperCase().equals(c.getNome())){
                        if(conta.getNatureza().equals(comparaNatureza) && !conta.getGrupo().toLowerCase().equals(comparaGrupo)){

                            return "Grupo da conta "+conta.getNome()+" está incorreto! O correto é "+comparaGrupo+"!";
                        }

                        else if(!conta.getNatureza().equals(comparaNatureza) && conta.getGrupo().toLowerCase().equals(comparaGrupo)){
                            return "Natureza da conta "+conta.getNome()+" está incorreta! O correto é "+comparaNatureza+"!";
                        }

                        else if(!conta.getNatureza().equals(comparaNatureza) && !conta.getGrupo().toLowerCase().equals(comparaGrupo)){
                            return "Você registrou a conta "+conta.getNome()+" incorretamente! O correto é "+comparaNatureza+", "+comparaGrupo+"!\n";
                        }
                                        
                    } 
                }
                
            }
            else{
                return "Essa conta("+conta.getNome()+") não é uma conta de Resultado!";
            }
        }
        
        else{
            return "A conta("+conta.getNome()+") não está registrada no plano de contas!";
        }
        return "";    
    }
    
    
    
    
    
}
